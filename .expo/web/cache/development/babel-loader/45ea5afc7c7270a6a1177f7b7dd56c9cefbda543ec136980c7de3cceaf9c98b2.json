{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { styles } from \"../Configuracoes/styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var ConfigScreen = function ConfigScreen(_ref) {\n  var navigation = _ref.navigation;\n  return _jsx(View, {\n    style: styles.containerConfig\n  });\n};\nfunction CustomNavigationBar(_ref2) {\n  var navigation = _ref2.navigation,\n    back = _ref2.back;\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    visible = _React$useState2[0],\n    setVisible = _React$useState2[1];\n  var openMenu = function openMenu() {\n    return setVisible(true);\n  };\n  var closeMenu = function closeMenu() {\n    return setVisible(false);\n  };\n  return _jsxs(Appbar.Header, {\n    children: [back ? _jsx(Appbar.BackAction, {\n      onPress: navigation.goBack\n    }) : null, _jsx(Appbar.Content, {\n      title: \"My awesome app\"\n    }), !back ? _jsxs(Menu, {\n      visible: visible,\n      onDismiss: closeMenu,\n      anchor: _jsx(Appbar.Action, {\n        icon: \"menu\",\n        color: \"white\",\n        onPress: openMenu\n      }),\n      children: [_jsx(Menu.Item, {\n        onPress: function onPress() {\n          console.log('Option 1 was pressed');\n        },\n        title: \"Option 1\"\n      }), _jsx(Menu.Item, {\n        onPress: function onPress() {\n          console.log('Option 2 was pressed');\n        },\n        title: \"Option 2\"\n      }), _jsx(Menu.Item, {\n        onPress: function onPress() {\n          console.log('Option 3 was pressed');\n        },\n        title: \"Option 3\",\n        disabled: true\n      })]\n    }) : null]\n  });\n}","map":{"version":3,"names":["styles","jsx","_jsx","jsxs","_jsxs","ConfigScreen","_ref","navigation","View","style","containerConfig","CustomNavigationBar","_ref2","back","_React$useState","React","useState","_React$useState2","_slicedToArray","visible","setVisible","openMenu","closeMenu","Appbar","Header","children","BackAction","onPress","goBack","Content","title","Menu","onDismiss","anchor","Action","icon","color","Item","console","log","disabled"],"sources":["/home/senacsenac/Docks-mobile-P.I/src/Screens/ConfigScreen.js"],"sourcesContent":["import { Button, Text, View } from \"react-native\";\nimport { styles } from \"../Configuracoes/styles\";\n\nexport const ConfigScreen = ({ navigation }) => {\n  return (\n    <View style={styles.containerConfig}>\n      \n    </View>\n  );\n};\nfunction CustomNavigationBar({ navigation, back }) {\n  const [visible, setVisible] = React.useState(false);\n  const openMenu = () => setVisible(true);\n  const closeMenu = () => setVisible(false);\n\n  return (\n    <Appbar.Header>\n      {back ? <Appbar.BackAction onPress={navigation.goBack} /> : null}\n      <Appbar.Content title=\"My awesome app\" />\n      {!back ? (\n        <Menu\n          visible={visible}\n          onDismiss={closeMenu}\n          anchor={\n            <Appbar.Action icon=\"menu\" color=\"white\" onPress={openMenu} />\n          }>\n          <Menu.Item onPress={() => {console.log('Option 1 was pressed')}} title=\"Option 1\" />\n          <Menu.Item onPress={() => {console.log('Option 2 was pressed')}} title=\"Option 2\" />\n          <Menu.Item onPress={() => {console.log('Option 3 was pressed')}} title=\"Option 3\" disabled />\n        </Menu>\n      ) : null}\n    </Appbar.Header>\n  );\n}"],"mappings":";;;;AACA,SAASA,MAAM;AAAkC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEjD,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAAC,IAAA,EAAuB;EAAA,IAAjBC,UAAU,GAAAD,IAAA,CAAVC,UAAU;EACvC,OACEL,IAAA,CAACM,IAAI;IAACC,KAAK,EAAET,MAAM,CAACU;EAAgB,EAE7B;AAEX,CAAC;AACD,SAASC,mBAAmBA,CAAAC,KAAA,EAAuB;EAAA,IAApBL,UAAU,GAAAK,KAAA,CAAVL,UAAU;IAAEM,IAAI,GAAAD,KAAA,CAAJC,IAAI;EAC7C,IAAAC,eAAA,GAA8BC,KAAK,CAACC,QAAQ,CAAC,KAAK,CAAC;IAAAC,gBAAA,GAAAC,cAAA,CAAAJ,eAAA;IAA5CK,OAAO,GAAAF,gBAAA;IAAEG,UAAU,GAAAH,gBAAA;EAC1B,IAAMI,QAAQ,GAAG,SAAXA,QAAQA,CAAA;IAAA,OAASD,UAAU,CAAC,IAAI,CAAC;EAAA;EACvC,IAAME,SAAS,GAAG,SAAZA,SAASA,CAAA;IAAA,OAASF,UAAU,CAAC,KAAK,CAAC;EAAA;EAEzC,OACEhB,KAAA,CAACmB,MAAM,CAACC,MAAM;IAAAC,QAAA,GACXZ,IAAI,GAAGX,IAAA,CAACqB,MAAM,CAACG,UAAU;MAACC,OAAO,EAAEpB,UAAU,CAACqB;IAAO,EAAG,GAAG,IAAI,EAChE1B,IAAA,CAACqB,MAAM,CAACM,OAAO;MAACC,KAAK,EAAC;IAAgB,EAAG,EACxC,CAACjB,IAAI,GACJT,KAAA,CAAC2B,IAAI;MACHZ,OAAO,EAAEA,OAAQ;MACjBa,SAAS,EAAEV,SAAU;MACrBW,MAAM,EACJ/B,IAAA,CAACqB,MAAM,CAACW,MAAM;QAACC,IAAI,EAAC,MAAM;QAACC,KAAK,EAAC,OAAO;QAACT,OAAO,EAAEN;MAAS,EAC5D;MAAAI,QAAA,GACDvB,IAAA,CAAC6B,IAAI,CAACM,IAAI;QAACV,OAAO,EAAE,SAAAA,QAAA,EAAM;UAACW,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;QAAA,CAAE;QAACT,KAAK,EAAC;MAAU,EAAG,EACpF5B,IAAA,CAAC6B,IAAI,CAACM,IAAI;QAACV,OAAO,EAAE,SAAAA,QAAA,EAAM;UAACW,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;QAAA,CAAE;QAACT,KAAK,EAAC;MAAU,EAAG,EACpF5B,IAAA,CAAC6B,IAAI,CAACM,IAAI;QAACV,OAAO,EAAE,SAAAA,QAAA,EAAM;UAACW,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;QAAA,CAAE;QAACT,KAAK,EAAC,UAAU;QAACU,QAAQ;MAAA,EAAG;IAAA,EACxF,GACL,IAAI;EAAA,EACM;AAEpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}